<?php

class AtomLink extends XMLement {

    private $URI;
    private $Rel;
    private $Type; // Valid MIME type per RFC 4288
    private $Lang;
    private $Title;
    private $Length;

    const REL_ALTERNATE = 1; // Alternate representation, permlink to html version++
    const REL_ENCLOSURE = 2; // Related resource that is potentially large (audio/video/++)
    const REL_RELATED = 3;   // Document that is somehow related
    const REL_SELF = 4;      // The feed itself
    const REL_VIA = 5;       // Source of the information provided in entry

    public function __construct($uri, $rel=NULL, $type=NULL, $lang=NULL, $title=NULL, $length=NULL) {
        parent::__construct('link', NULL, 'atom');

        $this->URI = $uri;

        if ($rel !== NULL)
            $this->SetRel($rel);

        if ($type !== NULL)
            $this->SetType($type);

        if ($lang !== NULL)
            $this->SetLang($lang);

        if ($title !== NULL)
            $this->SetTitle($title);

        if ($length !== NULL)
            $this->SetLength($length);
    }

    public function SetRel($rel) {
        if ($rel != AtomLink::REL_ALTERNATE && $rel != AtomLink::REL_ENCLOSURE &&
            $rel != AtomLink::REL_RELATED && $rel != AtomLink::REL_SELF && $rel != AtomLink::REL_VIA)
            throw new Exception('Rel must be of a type defined by the Atom specification (alternate, enclosure, related, self or via)');

        $this->Rel = $rel;
    }

    public function SetType($type) {
        $this->Type = $type;
    }

    public function SetLang($lang) {
        $this->Lang = $lang;
    }

    public function SetTitle($title) {
        $this->Title = $title;
    }

    public function SetLength($length) {
        if (!is_numeric($length))
            throw new Exception('Length must be a numeric value');

        $this->Length = (int)$length;
    }

    public static function Consume($data) {
        // parse atom linkage via dom
        $atomlink = new AtomLink();
    }

    public function Build() {
        $this->SetAttribute('href', $this->URI);

        if ($this->Rel !== NULL)
            $this->SetAttribute('rel', $this->Rel);

        if ($this->Type !== NULL)
            $this->SetAttribute('type', $this->Type);

        if ($this->Lang !== NULL)
            $this->SetAttribute('hreflang', $this->Lang);

        if ($this->Title !== NULL)
            $this->SetAttribute('title', $this->Title);

        if ($this->Length !== NULL)
            $this->SetAttribute('length', $this->Length);

        return $this;
    }
}

?>
